// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  firstName  String
  middleName String
  lastName   String
  email      String    @unique
  password   String
  role       String    @default("user")
  Service    Service[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Booking    Booking[]
  Reviews    Reviews[]
  Profile    Profile[]
}

model Profile {
  id                 String   @id() @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  fullName           String
  gender             String
  contactNo          String
  presentAddress     String
  avatar             String
  institutionName    String?
  class              String?
  designation        String?
  degree             String?
  experienceYear     String?  @default("0")
  subjectOfExpertise String[] @default([""])
  occupation         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Service {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  thumbnail   String
  name        String
  location    String
  authorName  String
  authorEmail String
  authorImage String
  description String
  category    String
  price       Float       @default(0)
  duration    String
  badge       String[]    @default([])
  serviceType serviceType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Booking     Booking[]
  TimeSlots   TimeSlots[]
  Reviews     Reviews[]
}

model Bookmark {
  id        String @id @default(uuid())
  serviceId String
  userId    String
  quantity  Int
}

model TimeSlots {
  id        String    @id @default(uuid())
  serviceId String
  service   Service   @relation(fields: [serviceId], references: [id])
  date      String
  startTime String
  endTime   String
  Booking   Booking[]
}

model Booking {
  id         String        @id @default(uuid())
  status     bookingStatus @default(pending)
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  serviceId  String
  service    Service       @relation(fields: [serviceId], references: [id])
  timeSlotId String
  timeSlots  TimeSlots     @relation(fields: [timeSlotId], references: [id])
}

model Reviews {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  rating    String
  text      String  @default("")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  thumbnail   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum serviceType {
  remote
  onsite
}

enum bookingStatus {
  pending
  cancelled
  booked
  completed
}
