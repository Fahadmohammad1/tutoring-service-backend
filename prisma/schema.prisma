// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  firstName       String
  middleName      String
  lastName        String
  email           String            @unique
  password        String
  role            String
  StudentProfile  StudentProfile[]
  TeacherProfile  TeacherProfile[]
  GuardianProfile GuardianProfile[]
  Service         Service[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Booking         Booking[]
  Reviews         Reviews[]
}

model StudentProfile {
  id              String   @id() @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  fullName        String
  gender          String
  contactNo       String
  presentAddress  String
  avatar          String
  institutionName String
  class           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TeacherProfile {
  id                 String   @id() @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  fullName           String
  gender             String
  contactNo          String
  presentAddress     String
  avatar             String
  institutionName    String
  designation        String
  degree             String
  experienceYear     String   @default("0")
  subjectOfExpertise String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model GuardianProfile {
  id             String @id() @default(uuid())
  userId         String
  user           User   @relation(fields: [userId], references: [id])
  fullName       String
  gender         String
  contactNo      String
  presentAddress String
  avatar         String
  address        String
  occupation     String
}

model Service {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  thumbnail   String
  name        String
  location    String
  authorName  String
  authorEmail String
  description String
  rating      String[]    @default(["0"])
  category    String
  price       Float       @default(0)
  duration    String
  badge       String[]    @default([])
  serviceType serviceType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Booking     Booking[]
  TimeSlots   TimeSlots[]
  Reviews     Reviews[]
}

model Booking {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
}

model Reviews {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  text      String
}

model TimeSlots {
  id        String  @id @default(uuid())
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])
  date      String
  startTime String
  endTime   String
}

enum serviceType {
  remote
  onsite
}
